service: environment-booking-app

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  environment:
    SLACK_BOT_TOKEN: ${ssm:/slack/bot-token}
    DYNAMODB_TABLE: 'EnvironmentBookings'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:GetItem
        - dynamodb:Scan
      Resource:
        - arn:aws:dynamodb:us-west-2:337508380087:table/EnvironmentBookings
        - arn:aws:ssm:us-west-2:337508380087:parameter/slack/bot-token  # Ad

functions:
  slackCommand:
    handler: src/lambda_function.lambda_handler
    events:
      - http:
          path: slack-command
          method: post
          integration: lambda-proxy

  initializeEnvironments:
    handler: src/initialize_environments_lambda.lambda_handler
    description: "Initialize environments in the DynamoDB table"

resources:
  Resources:
    EnvironmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: EnvironmentBookings
        AttributeDefinitions:
          - AttributeName: EnvironmentId
            AttributeType: S
        KeySchema:
          - AttributeName: EnvironmentId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    SlackCommandAPI:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-${self:provider.stage}
        Body: ${file(slack-command-api.yaml)}

plugins:
  - serverless-python-requirements

custom:
  pythonRequirements:
    dockerizePip: true
