service: environment-booking-app

plugins:
  - serverless-python-requirements

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: us-west-2
  environment:
    SLACK_BOT_TOKEN: ${ssm:/slack/bot-token}
    DYNAMODB_TABLE: 'EnvironmentBookings'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/EnvironmentBookings"

functions:
  slackCommand:
    handler: src/lambda_function.lambda_handler
    events:
      - http:
          path: slack-command
          method: post
          integration: lambda-proxy

resources:
  Resources:
    EnvironmentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: EnvironmentBookings
        AttributeDefinitions:
          - AttributeName: EnvironmentId
            AttributeType: S
        KeySchema:
          - AttributeName: EnvironmentId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${self:service}-${self:provider.stage}
        Body: ${file(slack-command-api.yaml)}

  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
    SlackCommandLambdaFunctionArn:
      Value:
        Fn::GetAtt: [slackCommand, Arn]

custom:
  pythonRequirements:
    dockerizePip: non-linux